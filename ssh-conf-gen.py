#!/usr/bin/env python3

from datetime import datetime

ssh_default_port = 22
ssh_default_user = ""


class SshHost:
    def __init__(self, host, hostname, ssh_port=ssh_default_port, user=ssh_default_user):
        self.host = host
        self.hostname = hostname
        self.ssh_port = ssh_port
        self.user = user
        # description?
        # identityfile?
        # tunneling?

    def create_config_str(self):
        """Returns the host block for the ssh config"""
        result = "Host {}".format(self.host)
        result += "\n    HostName {}".format(self.hostname)
        if self.ssh_port is not ssh_default_port:
            result += "\n    Port {}".format(self.ssh_port)
        if self.user is not ssh_default_user:
            result += "\n    User {}".format(self.user)
        result += "\n"
        return result


def parse_hosts_file(hosts_file):
    """Parses a hosts file to create a list of ssh hosts.
       Expects a CSV format like: "host, hostname, ssh_port, user" """
    ssh_hosts = []
    with open(hosts_file) as f:
        for line in f:
            splitted_line = [x.strip() for x in line.split(',')]
            host = SshHost(splitted_line[0], splitted_line[1])
            if (len(splitted_line) >= 2 and splitted_line[2] != ""):
                host.ssh_port = splitted_line[2]
            if (len(splitted_line) >= 3 and splitted_line[3] != ""):
                host.user = splitted_line[3]
            ssh_hosts.append(host)
    return ssh_hosts


def get_file_header():
    """Returns a file header string containing cration date"""

    return """# This file was auto generated by ssh-conf-gen
# Creation date: {}\n""".format(datetime.now().strftime("%Y-%m-%d %H:%M"))


def write_ssh_config_file(dest_file, ssh_hosts):
    """Writes ssh hosts to supplied file"""
    with open(dest_file, "w+") as f:
        f.write(get_file_header())
        for host in ssh_hosts:
            f.write("\n{}".format(host.create_config_str()))


if __name__ == "__main__":
    input_file = "hosts.txt"
    output_file = "config"

    hosts = parse_hosts_file(input_file)
    write_ssh_config_file(output_file, hosts)
